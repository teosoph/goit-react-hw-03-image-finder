{"version":3,"sources":["services/imagesApi.js","components/Searchbar/Searchbar.js","components/Loader/Loader.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","App.js","index.js"],"names":["axios","defaults","baseURL","fetchServiceApiData","getImages","query","page","perPage","get","then","response","data","hits","Searchbar","state","searchQuery","onSearchInputChange","event","setState","target","value","onSearchFromSubmit","preventDefault","onFormSubmit","props","this","className","onSubmit","type","id","autoComplete","autoFocus","onChange","placeholder","Component","LoaderSpinner","color","height","width","Modal","onKeydownClick","e","onCloseModal","code","window","addEventListener","removeEventListener","children","onClick","ImageGalleryItem","src","largeImg","alt","data-img","ImageGallery","images","onImgClick","map","webformatURL","largeImageURL","Button","onBtnClick","text","App","currentPictures","loader","openModal","loadMore","prev","nodeName","dataset","img","modalSwitcher","loaderSwitcher","fetchPictures","settings","imagesApi","fetchApiData","console","log","prevProps","prevState","length","scrollTo","top","document","documentElement","scrollHeight","behavior","Loader","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOAgBAA,IAAMC,SAASC,QAAU,2BAEzB,IAWeC,EATa,CAC1BC,UAD0B,YACW,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACvB,OAAOP,IACJQ,IADI,cAEIH,EAFJ,gBAJI,qCAIJ,iBAEgCC,EAFhC,6DAEyFC,IAE7FE,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,U,OCJnBC,E,4MAMnBC,MAAQ,CACNC,YAAa,I,EAGfC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CACZH,YAAaE,EAAME,OAAOC,S,EAI9BC,mBAAqB,SAACJ,GACpBA,EAAMK,kBAGNC,EAFyB,EAAKC,MAAtBD,cAEK,EAAKT,MAAMC,aACxB,EAAKG,SAAS,CAAEH,YAAa,M,4CAG/B,WAAU,IACAA,EAAgBU,KAAKX,MAArBC,YACR,OACE,8BACE,wBAAQW,UAAU,YAAlB,SACE,uBAAMA,UAAU,aAAaC,SAAUF,KAAKJ,mBAA5C,UACE,wBAAQO,KAAK,SAASF,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,sBAGF,uBACEG,GAAG,SACHH,UAAU,mBACVE,KAAK,OACLE,aAAa,MACbC,WAAS,EACTX,MAAOL,EACPiB,SAAUP,KAAKT,oBACfiB,YAAY,wC,GA1CaC,a,iBCRxBC,EARO,WACpB,OACE,gCACE,cAAC,IAAD,CAAQP,KAAK,WAAWQ,MAAM,UAAUC,OAAQ,IAAKC,MAAO,MAAQ,QCKrDC,E,4MAanBC,eAAiB,SAACC,GAAO,IACfC,EAAiB,EAAKlB,MAAtBkB,aACO,WAAXD,EAAEE,MACJD,K,uDAXJ,WACEE,OAAOC,iBAAiB,UAAWpB,KAAKe,kB,kCAG1C,WACEI,OAAOE,oBAAoB,UAAWrB,KAAKe,kB,oBAU7C,WAAU,IAAD,EAC4Bf,KAAKD,MAAhCuB,EADD,EACCA,SAAUL,EADX,EACWA,aAClB,OACE,qBAAKhB,UAAU,UAAUsB,QAASN,EAAlC,SACE,qBAAKhB,UAAU,QAAf,SAAwBqB,U,GAxBGb,aCMpBe,EAXU,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,SAAR,OACvB,oBAAIzB,UAAU,mBAAd,SACE,qBACEA,UAAU,yBACVwB,IAAKA,EACLE,IAAI,QACJC,WAAUF,OCSDG,EAbM,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAX,OACnB,oBAAI9B,UAAU,eAAesB,QAASQ,EAAtC,SACGD,EAAOE,KAAI,gBAAG5B,EAAH,EAAGA,GAAI6B,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAArB,OACV,cAAC,EAAD,CAA2BT,IAAKQ,EAAcP,SAAUQ,GAAjC9B,SCSd+B,EAXA,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,KAAf,OACb,wBAAQpC,UAAU,SAASG,GAAG,SAASD,KAAK,SAASoB,QAASa,EAA9D,SACGC,KCJgBC,G,kNACnBjD,MAAQ,CACNT,MAAO,GACPC,KAAM,EACNC,QAAS,GACTgD,OAAQ,GACRS,gBAAiB,GACjBC,QAAQ,EACRC,WAAW,G,EAkBbC,SAAW,WACT,EAAKjD,UAAS,SAACkD,GAAD,MAAW,CACvB9D,KAAM8D,EAAK9D,KAAO,O,EAItBkD,WAAa,SAACvC,GACkB,QAA1BA,EAAME,OAAOkD,WAGjB,EAAKnD,SAAS,CACZ8C,gBAAiB/C,EAAME,OAAOmD,QAAQC,MAExC,EAAKC,kB,EAGPC,eAAiB,WACf,EAAKvD,UAAS,SAACkD,GAAD,MAAW,CACvBH,QAASG,EAAKH,Y,EAIlBS,cAAgB,WAAO,IAAD,EACa,EAAK5D,MAChC6D,EAAW,CACftE,MAHkB,EACZA,MAGNC,KAJkB,EACLA,KAIbC,QALkB,EACCA,SASrB,OAFA,EAAKkE,iBAEEG,EAAUxE,UAAUuE,GAAUlE,MAAK,SAACoE,GACzC,EAAK3D,UAAS,SAACkD,GAAD,MAAW,CACvBb,OAAO,GAAD,mBAAMa,EAAKb,QAAX,YAAsBsB,QAE9BC,QAAQC,IAAIF,O,EAIhBlD,SAAW,SAACZ,GACV,EAAKG,SAAS,CACZb,MAAOU,EACPT,KAAM,EACNiD,OAAQ,M,EAIZiB,cAAgB,WACd,EAAKtD,UAAS,SAACkD,GAAD,MAAW,CACvBF,WAAYE,EAAKF,e,wDAjErB,SAAmBc,EAAWC,GAAY,IAAD,SACPxD,KAAKX,MAA7BT,EAD+B,EAC/BA,MAAOC,EADwB,EACxBA,KAAMiD,EADkB,EAClBA,OACjB0B,EAAU5E,QAAUA,GAAS4E,EAAU3E,OAASA,GAClDmB,KAAKiD,gBAAgBjE,MAAK,WACxB,EAAKgE,iBACDlB,EAAO2B,OAAS,IAClBtC,OAAOuC,SAAS,CACdC,IAAKC,SAASC,gBAAgBC,aAC9BC,SAAU,gB,oBA6DpB,WAAU,IAAD,EACuD/D,KAAKX,MAA3DyC,EADD,EACCA,OAAQlD,EADT,EACSA,MAAO4D,EADhB,EACgBA,OAAQC,EADxB,EACwBA,UAAWF,EADnC,EACmCA,gBAC1C,OACE,sBAAKtC,UAAU,MAAf,UACGuC,GACC,cAAC,EAAD,UACE,cAACwB,EAAD,MAGJ,cAAC,EAAD,CAAWrE,MAAOf,EAAOkB,aAAcE,KAAKE,WAE5C,cAAC,EAAD,CAAc4B,OAAQA,EAAQC,WAAY/B,KAAK+B,aAC9CD,EAAO2B,OAAS,GACf,cAAC,EAAD,CACErB,WAAYpC,KAAK0C,SACjBL,KAAMG,EAAS,UAAY,cAI9BC,GACC,cAAC,EAAD,CAAOxB,aAAcjB,KAAK+C,cAA1B,SACE,qBAAKtB,IAAKc,a,GArGW9B,cCNjCwD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFP,SAASQ,eAAe,W","file":"static/js/main.e17e18fb.chunk.js","sourcesContent":["// Инструкция Pixabay API\n// Для HTTP-запросов используй публичный сервис поиска изображений Pixabay. Зарегистрируйся и получи приватный ключ доступа.\n\n// URL-строка HTTP-запроса.\n\n// https://pixabay.com/api/?q=что_искать&page=номер_страницы&key=твой_ключ&image_type=photo&orientation=horizontal&per_page=12\n// Pixabay API поддерживает пагинацию, по умолчанию параметр page равен 1. Пусть в ответе приходит по 12 объектов, установлено в параметре per_page. Не забудь что при поиске по новому ключевому слову, необходимо сбрасывать значение page в 1.\n\n// В ответе от апи приходит массив объектов, в которых тебе интересны только следущие свойства.\n\n// id - уникальный идентификатор\n// webformatURL - ссылка на маленькое изображение для списка карточек\n// largeImageURL - ссылка на большое изображение для модального окна\n\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://pixabay.com/api/\";\n\nconst apiKey = \"21420478-fd2340d70fd107c9f0617a1e9\";\n\nconst fetchServiceApiData = {\n  getImages({ query, page, perPage }) {\n    return axios\n      .get(\n        `/?q=${query}&key=${apiKey}&page=${page}&image_type=photo&orientation=horizontal&per_page=${perPage}`\n      )\n      .then((response) => response.data.hits);\n  },\n};\nexport default fetchServiceApiData;\n","// Описание компонента Searchbar\n// Компонент принимает один проп onSubmit - функцию для передачи значения инпута при сабмите формы. Создает DOM-элемент следующей структуры.\n\n// <header className=\"Searchbar\">\n//   <form className=\"SearchForm\">\n//     <button type=\"submit\" className=\"SearchForm-button\">\n//       <span className=\"SearchForm-button-label\">Search</span>\n//     </button>\n\n//     <input\n//       className=\"SearchForm-input\"\n//       type=\"text\"\n//       autocomplete=\"off\"\n//       autofocus\n//       placeholder=\"Search images and photos\"\n//     />\n//   </form>\n// </header>\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class Searchbar extends Component {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    onFormSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    searchQuery: \"\",\n  };\n\n  onSearchInputChange = (event) => {\n    this.setState({\n      searchQuery: event.target.value,\n    });\n  };\n\n  onSearchFromSubmit = (event) => {\n    event.preventDefault();\n    const { onFormSubmit } = this.props;\n\n    onFormSubmit(this.state.searchQuery);\n    this.setState({ searchQuery: \"\" });\n  };\n\n  render() {\n    const { searchQuery } = this.state;\n    return (\n      <div>\n        <header className=\"Searchbar\">\n          <form className=\"SearchForm\" onSubmit={this.onSearchFromSubmit}>\n            <button type=\"submit\" className=\"SearchForm-button\">\n              <span className=\"SearchForm-button-label\">Search</span>\n            </button>\n\n            <input\n              id=\"blink7\"\n              className=\"SearchForm-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              value={searchQuery}\n              onChange={this.onSearchInputChange}\n              placeholder=\"Search images and photos\"\n            />\n          </form>\n        </header>\n      </div>\n    );\n  }\n}\n","// Описание компонента Loader\n// Компонент спинера, отображется пока идет загрузка изобаржений. Используй любой готовый компонент, например react-loader-spinner или любой другой.\n\nimport React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nconst LoaderSpinner = () => {\n  return (\n    <div>\n      <Loader type=\"TailSpin\" color=\"#ffc0cb\" height={500} width={500} />{\" \"}\n    </div>\n  );\n};\n\nexport default LoaderSpinner;\n","// Описание компонента Modal\n// При клике по элементу галереи должно открываться модальное окно с темным оверлеем и отображаться большая версия изображения. Модальное окно должно закрываться по нажатию клавиши ESC или по клику на оверлее.\n\n// Внешний вид похож на функционал этого VanillaJS-плагина, только вместо белого модального окна рендерится изображение (в примере нажми Run). Анимацию делать не нужно!\n\n// <div className=\"Overlay\">\n//   <div className=\"Modal\">\n//     <img src=\"\" alt=\"\" />\n//   </div>\n// </div>\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class Modal extends Component {\n  static propTypes = {\n    onCloseModal: PropTypes.func,\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.onKeydownClick);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.onKeydownClick);\n  }\n\n  onKeydownClick = (e) => {\n    const { onCloseModal } = this.props;\n    if (e.code === \"Escape\") {\n      onCloseModal();\n    }\n  };\n\n  render() {\n    const { children, onCloseModal } = this.props;\n    return (\n      <div className=\"Overlay\" onClick={onCloseModal}>\n        <div className=\"Modal\">{children}</div>\n      </div>\n    );\n  }\n}\n","// Описание компонента ImageGalleryItem\n// Компонент элемента списка с изображением. Создает DOM-элемент следующей структуры.\n\n// <li className=\"ImageGalleryItem\">\n//   <img src=\"\" alt=\"\" className=\"ImageGalleryItem-image\" />\n// </li>\n\nimport React from \"react\";\n\nconst ImageGalleryItem = ({ src, largeImg }) => (\n  <li className=\"ImageGalleryItem\">\n    <img\n      className=\"ImageGalleryItem-image\"\n      src={src}\n      alt=\"image\"\n      data-img={largeImg}\n    />\n  </li>\n);\n\nexport default ImageGalleryItem;\n","// Описание компонента ImageGallery\n// Список карточек изображений. Создает DOM-элемент следующей структуры.\n\n// <ul className=\"ImageGallery\">\n//   <!-- Набор <li> с изображениями -->\n// </ul>\n\nimport React from \"react\";\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\nimport PropTypes from \"prop-types\";\n\nconst ImageGallery = ({ images, onImgClick }) => (\n  <ul className=\"ImageGallery\" onClick={onImgClick}>\n    {images.map(({ id, webformatURL, largeImageURL }) => (\n      <ImageGalleryItem key={id} src={webformatURL} largeImg={largeImageURL} />\n    ))}\n  </ul>\n);\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.object),\n  onImgClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","// Описание компонента Button\n// При нажатии на кнопку Load more должна догружаться следующая порция изображений и рендериться вместе с предыдущими. После загрузки и рендера новой партии изображений страница должна плавно скролиться. Для скрола используй следующий код.\n\n// window.scrollTo({\n//   top: document.documentElement.scrollHeight,\n//   behavior: 'smooth',\n// });\n// Кнопка должна рендерится только тогда, когда есть какие-то загруженные изобаржения. Если массив изображений пуст, кнопка не рендерится.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Button = ({ onBtnClick, text }) => (\n  <button className=\"Button\" id=\"blink7\" type=\"button\" onClick={onBtnClick}>\n    {text}\n  </button>\n);\n\nButton.propTypes = {\n  onBtnClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport imagesApi from \"./services/imagesApi\";\nimport Searchbar from \"./components/Searchbar/Searchbar\";\nimport Loader from \"./components/Loader/Loader\";\nimport Modal from \"./components/Modal\";\nimport ImageGallery from \"./components/ImageGallery/ImageGallery\";\nimport Button from \"./components/Button\";\n\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    query: \"\",\n    page: 1,\n    perPage: 12,\n    images: [],\n    currentPictures: \"\",\n    loader: false,\n    openModal: false,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { query, page, images } = this.state;\n    if (prevState.query !== query || prevState.page !== page) {\n      this.fetchPictures().then(() => {\n        this.loaderSwitcher();\n        if (images.length > 10) {\n          window.scrollTo({\n            top: document.documentElement.scrollHeight,\n            behavior: \"smooth\",\n          });\n        }\n      });\n    }\n  }\n\n  loadMore = () => {\n    this.setState((prev) => ({\n      page: prev.page + 1,\n    }));\n  };\n\n  onImgClick = (event) => {\n    if (event.target.nodeName !== \"IMG\") {\n      return;\n    }\n    this.setState({\n      currentPictures: event.target.dataset.img,\n    });\n    this.modalSwitcher();\n  };\n\n  loaderSwitcher = () => {\n    this.setState((prev) => ({\n      loader: !prev.loader,\n    }));\n  };\n\n  fetchPictures = () => {\n    const { query, page, perPage } = this.state;\n    const settings = {\n      query: query,\n      page: page,\n      perPage: perPage,\n    };\n\n    this.loaderSwitcher();\n\n    return imagesApi.getImages(settings).then((fetchApiData) => {\n      this.setState((prev) => ({\n        images: [...prev.images, ...fetchApiData],\n      }));\n      console.log(fetchApiData);\n    });\n  };\n\n  onSubmit = (searchQuery) => {\n    this.setState({\n      query: searchQuery,\n      page: 1,\n      images: [],\n    });\n  };\n\n  modalSwitcher = () => {\n    this.setState((prev) => ({\n      openModal: !prev.openModal,\n    }));\n  };\n\n  render() {\n    const { images, query, loader, openModal, currentPictures } = this.state;\n    return (\n      <div className=\"App\">\n        {loader && (\n          <Modal>\n            <Loader />\n          </Modal>\n        )}\n        <Searchbar value={query} onFormSubmit={this.onSubmit} />\n\n        <ImageGallery images={images} onImgClick={this.onImgClick} />\n        {images.length > 0 && (\n          <Button\n            onBtnClick={this.loadMore}\n            text={loader ? \"Loading\" : \"Load more\"}\n          />\n        )}\n\n        {openModal && (\n          <Modal onCloseModal={this.modalSwitcher}>\n            <img src={currentPictures} />\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}